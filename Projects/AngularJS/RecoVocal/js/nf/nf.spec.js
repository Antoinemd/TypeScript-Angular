System.register(["@NoyauFonctionnel/nf"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var nf_1;
    return {
        setters: [
            function (nf_1_1) {
                nf_1 = nf_1_1;
            }
        ],
        execute: function () {
            describe("Tests d'initialisation d'une liste", () => {
                let Liste = new nf_1.ListeChoses();
                it(`Liste doit être vide`, () => expect(Liste.choses.length === 0).toBe(true));
            });
            describe("Tests ajout d'une chose", () => {
                let Liste = new nf_1.ListeChoses();
                let eventListe, txt = "un truc à faire";
                Liste.on("update", (NF, eventName, event) => {
                    eventListe = event;
                });
                Liste.Ajouter(txt);
                it("Liste contient un élément", () => expect(Liste.choses.length).toEqual(1));
                it(`Le texte du premier élément de Liste vaut "${txt}"`, () => expect(Liste.choses[0].texte === txt).toBe(true));
                it(`La liste a bien prévenue de l'ajout`, () => expect(eventListe && eventListe.append === Liste.choses[0]).toBe(true));
            });
            describe("Tests retrait de la seconde chose dans une liste de trois choses", () => {
                let Liste = new nf_1.ListeChoses();
                let eventListe, txt = "un truc à faire";
                Liste.on("update", (NF, eventName, event) => {
                    eventListe = event;
                });
                Liste.Ajouter("1:" + txt).Ajouter("2:" + txt).Ajouter("3:" + txt);
                let élémentRetiré = Liste.choses[1];
                Liste.Retirer(élémentRetiré);
                it("Liste contient 2 élément", () => expect(Liste.choses.length).toEqual(2));
                it(`Le texte du premier élément de Liste vaut "1:${txt}"`, () => expect(Liste.choses[0].texte === "1:" + txt).toBe(true));
                it(`Le texte du premier élément de Liste vaut "3:${txt}"`, () => expect(Liste.choses[1].texte === "3:" + txt).toBe(true));
                it(`La liste a bien prévenue du retrait du second élément`, () => expect(eventListe && eventListe.remove).toBe(élémentRetiré));
            });
        }
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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R0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDeEgsRUFBRSxDQUFDLHVEQUF1RCxFQUFFLE1BQU0sTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDbkksQ0FBQyxDQUFDLENBQUM7UUFDSCxDQUFDIiwiZmlsZSI6Im5mL25mLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpc3RlQ2hvc2VzLCBDaG9zZSwgRXZlbnRMaXN0ZUNob3Nlc30gZnJvbSBcIkBOb3lhdUZvbmN0aW9ubmVsL25mXCI7XG5cbmRlc2NyaWJlKFwiVGVzdHMgZCdpbml0aWFsaXNhdGlvbiBkJ3VuZSBsaXN0ZVwiLCAoKSA9PiB7XG4gICAgbGV0IExpc3RlIDogTGlzdGVDaG9zZXMgPSBuZXcgTGlzdGVDaG9zZXMoKTtcbiAgICBpdChgTGlzdGUgZG9pdCDDqnRyZSB2aWRlYCwgKCkgPT4gZXhwZWN0KExpc3RlLmNob3Nlcy5sZW5ndGggPT09IDApLnRvQmUodHJ1ZSkpO1xuXG59KTtcblxuXG5kZXNjcmliZShcIlRlc3RzIGFqb3V0IGQndW5lIGNob3NlXCIsICgpID0+IHtcbiAgICBsZXQgTGlzdGUgOiBMaXN0ZUNob3NlcyA9IG5ldyBMaXN0ZUNob3NlcygpO1xuICAgIGxldCBldmVudExpc3RlIDogRXZlbnRMaXN0ZUNob3NlcywgdHh0ID0gXCJ1biB0cnVjIMOgIGZhaXJlXCI7XG4gICAgTGlzdGUub24oXCJ1cGRhdGVcIiwgKE5GOiBMaXN0ZUNob3NlcywgZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50OiBFdmVudExpc3RlQ2hvc2VzKSA9PiB7XG4gICAgICAgIGV2ZW50TGlzdGUgPSBldmVudDtcbiAgICB9ICk7XG5cbiAgICBMaXN0ZS5Bam91dGVyKCB0eHQgKTtcbiAgICBpdChcIkxpc3RlIGNvbnRpZW50IHVuIMOpbMOpbWVudFwiLCAoKSA9PiBleHBlY3QoTGlzdGUuY2hvc2VzLmxlbmd0aCkudG9FcXVhbCgxKSk7XG4gICAgaXQoYExlIHRleHRlIGR1IHByZW1pZXIgw6lsw6ltZW50IGRlIExpc3RlIHZhdXQgXCIke3R4dH1cImAsICgpID0+IGV4cGVjdChMaXN0ZS5jaG9zZXNbMF0udGV4dGUgPT09IHR4dCkudG9CZSh0cnVlKSk7XG4gICAgaXQoYExhIGxpc3RlIGEgYmllbiBwcsOpdmVudWUgZGUgbCdham91dGAsICgpID0+IGV4cGVjdChldmVudExpc3RlICYmIGV2ZW50TGlzdGUuYXBwZW5kID09PSBMaXN0ZS5jaG9zZXNbMF0pLnRvQmUodHJ1ZSkpO1xufSk7XG5cbmRlc2NyaWJlKFwiVGVzdHMgcmV0cmFpdCBkZSBsYSBzZWNvbmRlIGNob3NlIGRhbnMgdW5lIGxpc3RlIGRlIHRyb2lzIGNob3Nlc1wiLCAoKSA9PiB7XG4gICAgbGV0IExpc3RlIDogTGlzdGVDaG9zZXMgPSBuZXcgTGlzdGVDaG9zZXMoKTtcbiAgICBsZXQgZXZlbnRMaXN0ZSA6IEV2ZW50TGlzdGVDaG9zZXMsIHR4dCA9IFwidW4gdHJ1YyDDoCBmYWlyZVwiO1xuICAgIExpc3RlLm9uKFwidXBkYXRlXCIsIChORjogTGlzdGVDaG9zZXMsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogRXZlbnRMaXN0ZUNob3NlcykgPT4ge1xuICAgICAgICBldmVudExpc3RlID0gZXZlbnQ7XG4gICAgfSApO1xuXG4gICAgTGlzdGUuQWpvdXRlciggXCIxOlwiK3R4dCApLkFqb3V0ZXIoIFwiMjpcIit0eHQgKS5Bam91dGVyKCBcIjM6XCIrdHh0ICk7XG4gICAgbGV0IMOpbMOpbWVudFJldGlyw6kgPSBMaXN0ZS5jaG9zZXNbMV07XG4gICAgTGlzdGUuUmV0aXJlciggw6lsw6ltZW50UmV0aXLDqSApO1xuICAgIGl0KFwiTGlzdGUgY29udGllbnQgMiDDqWzDqW1lbnRcIiwgKCkgPT4gZXhwZWN0KExpc3RlLmNob3Nlcy5sZW5ndGgpLnRvRXF1YWwoMikpO1xuICAgIGl0KGBMZSB0ZXh0ZSBkdSBwcmVtaWVyIMOpbMOpbWVudCBkZSBMaXN0ZSB2YXV0IFwiMToke3R4dH1cImAsICgpID0+IGV4cGVjdChMaXN0ZS5jaG9zZXNbMF0udGV4dGUgPT09IFwiMTpcIit0eHQpLnRvQmUodHJ1ZSkpO1xuICAgIGl0KGBMZSB0ZXh0ZSBkdSBwcmVtaWVyIMOpbMOpbWVudCBkZSBMaXN0ZSB2YXV0IFwiMzoke3R4dH1cImAsICgpID0+IGV4cGVjdChMaXN0ZS5jaG9zZXNbMV0udGV4dGUgPT09IFwiMzpcIit0eHQpLnRvQmUodHJ1ZSkpO1xuICAgIGl0KGBMYSBsaXN0ZSBhIGJpZW4gcHLDqXZlbnVlIGR1IHJldHJhaXQgZHUgc2Vjb25kIMOpbMOpbWVudGAsICgpID0+IGV4cGVjdChldmVudExpc3RlICYmIGV2ZW50TGlzdGUucmVtb3ZlKS50b0JlKMOpbMOpbWVudFJldGlyw6kpKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
